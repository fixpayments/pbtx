#!/usr/bin/env node

/*
  Copyright 2021 Fix Payments Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

'use strict';

const PBTX = require('../');
const pbtx_pb = require('../pbtx_pb');
const program  = require('commander');
const fetch = require('node-fetch');


const { Api, JsonRpc, RpcError } = require('eosjs');
const { KeosdSignatureProvider } = require('@proton/keosd-signature-provider');
const { TextEncoder, TextDecoder } = require('util');


program
    .requiredOption('--url [value]', 'EOSIO API URL')
    .requiredOption('--contract [value]', 'pbtx contract account name');

program
    .command('setperm <networkid> <jsdata>')
    .requiredOption('--admin [value]', 'admin account name')
    .description('Set an actor permission')
    .action((networkid, jsdata, cmdopts) => {
        const options = program.opts();

        let perm = PBTX.makePermission(JSON.parse(jsdata));
        const api = get_api();

        PBTX.setPermission(networkid, perm, api, options.contract, cmdopts.admin)
            .then((res) => {
                console.log('Transaction ID: ' + res.transaction_id);
                process.exit(0);
            })
            .catch((err) => {
                console.error(err);
                process.exit(1);
            });
    });


program
    .command('showperm <networkid> <actor>')
    .description('Show an actor permission')
    .action((networkid, actor) => {
        const options = program.opts();
        let actorstr = BigInt(actor).toString();
        try {
            fetch(options.url + '/v1/chain/get_table_rows', {
                method: 'post',
                body:    JSON.stringify(
                    {
                        json: 'true',
                        code: options.contract,
                        scope: BigInt(networkid).toString(),
                        table: 'actorperm',
                        index_position: 1,
                        key_type: 'i64',
                        lower_bound: actorstr,
                        upper_bound: actorstr,
                        limit: 1
                    }
                ),
                headers: { 'Content-Type': 'application/json' }
            })
                .then(res => {
                    if( !res.ok ) {
                        res.json().then(err => {throw Error(err)});
                    }
                    else {
                        return res.json();
                    }
                })
                .then(async (data) => {
                    if( !data.rows || data.rows.length != 1 ) {
                        console.error("actor not found");
                        process.exit(1);
                    }
                    else {
                        let permbytes = Buffer.from(data.rows[0].permission, 'hex');
                        let ret = PBTX.permissionToObject(pbtx_pb.Permission.deserializeBinary(permbytes));
                        console.log(JSON.stringify(ret, null, 2));
                        process.exit(0);
                    }
                })
                .catch(err => console.error(err));
        }
        catch(err) {
            console.error(err);
        }
    });


program
    .command('trx <networkid>')
    .requiredOption('--actor [value]', 'actor ID')
    .requiredOption('--seqnum [value]', 'transaction sequence number')
    .requiredOption('--type [value]', 'transaction type')
    .requiredOption('--actorkey [value]', 'Actor private key')
    .requiredOption('--worker [value]', 'worker account name')
    .option('--content [value]', 'transaction content in hex')
    .description('Execute a PBTX transaction')
    .action((networkid, cmdopts) => {
        const options = program.opts();

        let bodydata = {
            network_id: BigInt(networkid),
            actor: BigInt(cmdopts.actor),
            seqnum: Number.parseInt(cmdopts.seqnum),
            transaction_type: Number.parseInt(cmdopts.type)
        };
        if( cmdopts.content ) {
            bodydata.transaction_content = Buffer.from(cmdopts.content, 'hex');
        }

        const body = PBTX.makeTransactionBody(bodydata);

        const tx = PBTX.signTransactionBody(body, [cmdopts.actorkey]);
        const api = get_api();

        PBTX.sendTransaction(tx, api, options.contract, cmdopts.worker)
            .then((res) => {
                console.log('Transaction ID: ' + res.transaction_id);
                process.exit(0);
            })
            .catch((err) => {
                console.error(err);
                process.exit(1);
            });
    });


program.parse(process.argv);




function get_api() {
    const options = program.opts();
    const rpc = new JsonRpc(options.url, { fetch });
    const api = new Api({ rpc: rpc, signatureProvider: new KeosdSignatureProvider(),
                          textDecoder: new TextDecoder(), textEncoder: new TextEncoder()});
    return api;
}



/*
 Local Variables:
 mode: javascript
 indent-tabs-mode: nil
 End:
*/
